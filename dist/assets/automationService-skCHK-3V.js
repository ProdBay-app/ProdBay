import{s as o}from"./supabase-DvtyvoWz.js";class d{static parseAssetsFromBrief(e){const t={printing:["print","banner","poster","flyer","brochure","signage"],staging:["stage","platform","backdrop","display"],audio:["sound","speaker","microphone","audio","music"],lighting:["light","lighting","illumination","led"],catering:["food","catering","meal","refreshment","beverage"],transport:["transport","delivery","logistics","shipping"],design:["design","graphic","branding","logo","creative"]},a=e.toLowerCase(),i=[];return Object.entries(t).forEach(([s,r])=>{r.some(c=>a.includes(c))&&i.push(s.charAt(0).toUpperCase()+s.slice(1))}),i.length===0&&i.push("General Requirements"),i}static async createAssetsForProject(e,t){const a=this.parseAssetsFromBrief(t),i=[];for(const s of a){const{data:r,error:n}=await o.from("assets").insert({project_id:e,asset_name:s,specifications:`Requirements for ${s.toLowerCase()} based on project brief`,status:"Pending"}).select().single();r&&!n&&i.push(r)}return i}static async findRelevantSuppliers(e){const{data:t,error:a}=await o.from("suppliers").select("*");return a||!t?[]:t.filter(i=>i.service_categories.some(s=>s.toLowerCase().includes(e.toLowerCase())||e.toLowerCase().includes(s.toLowerCase())))}static async sendQuoteRequestsForAsset(e){const t=await this.findRelevantSuppliers(e.asset_name);for(const a of t){const{data:i,error:s}=await o.from("quotes").insert({supplier_id:a.id,asset_id:e.id,status:"Submitted"}).select().single();i&&!s&&(console.log(`Email sent to ${a.contact_email}:`),console.log(`Quote Request for: ${e.asset_name}`),console.log(`Specifications: ${e.specifications}`),console.log(`Quote submission link: ${window.location.origin}/quote/${i.quote_token}`))}await o.from("assets").update({status:"Quoting"}).eq("id",e.id)}static async acceptQuote(e){const{data:t}=await o.from("quotes").select("*, asset:assets(*)").eq("id",e).single();t&&(await o.from("quotes").update({status:"Accepted"}).eq("id",e),await o.from("quotes").update({status:"Rejected"}).eq("asset_id",t.asset_id).neq("id",e),await o.from("assets").update({assigned_supplier_id:t.supplier_id,status:"Approved"}).eq("id",t.asset_id))}static async updateProjectStatus(e){const{data:t}=await o.from("assets").select("status").eq("project_id",e);if(!t||t.length===0)return;let a="New";const i=t.map(s=>s.status);i.every(s=>s==="Delivered")?a="Completed":i.some(s=>s==="In Production"||s==="Approved")?a="In Progress":i.some(s=>s==="Quoting")&&(a="Quoting"),await o.from("projects").update({project_status:a}).eq("id",e)}}export{d as A};
